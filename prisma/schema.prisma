generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id              String              @id
  username        String              @unique
  name            String
  surnName        String
  email           String?             @unique
  phone           String?             @unique
  address         String
  img             String?
  bloodType       String?
  sex             UseSex
  birthday        DateTime
  createdAt       DateTime            @default(now())

  parentId        String
  parent          Parent              @relation(fields: [parentId], references: [id])
  classId         Int
  class           Class               @relation(fields: [classId], references: [id])
  gradeId         Int
  grade           Grade               @relation(fields: [gradeId], references: [id])

  attendance      Attendance[]
  assessmentResults AssessmentResult[]
}

model Teacher {
  id        String   @id
  username  String   @unique
  name      String
  surnName  String
  email     String?  @unique
  phone     String?  @unique
  address   String?
  img       String?
  bloodType String?
  sex       UseSex
  birthday  DateTime
  createdAt DateTime @default(now())

  subjects   Subject[]
  lessons    Lesson[]
  classes    Class[]

  gradedAssessments AssessmentResult[] @relation("GradedByTeacher")
}

model Parent {
  id        String   @id
  username  String   @unique
  name      String
  surnName  String
  email     String?  @unique
  phone     String   @unique
  address   String
  createdAt DateTime @default(now())

  students  Student[]
}

model Grade {
  id       Int      @id @default(autoincrement())
  level    String   @unique
  students Student[]
  classes  Class[]
}

model Class {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  capacity    Int
  supervisorId String?
  supervisor  Teacher?      @relation(fields: [supervisorId], references: [id])
  lessons     Lesson[]
  students    Student[]
  gradeId     Int
  grade       Grade         @relation(fields: [gradeId], references: [id])
  events      Event[]
  annoncements Announcement[]
  assessments Assessment[]
}

model Subject {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  teachers  Teacher[]
  lessons   Lesson[]
  assessments Assessment[]
}

model Lesson {
  id        Int        @id @default(autoincrement())
  name      String
  day       Day
  startTime DateTime
  endTime   DateTime

  subjectId Int
  subject   Subject     @relation(fields: [subjectId], references: [id])
  classId   Int
  class     Class       @relation(fields: [classId], references: [id])
  teacherId String
  teacher   Teacher     @relation(fields: [teacherId], references: [id])

  attendance Attendance[]
}

model AcademicYear {
  id       Int     @id @default(autoincrement())
  year     String  @unique // e.g. "2024/2025"
  terms    Term[]
}

model Term {
  id             Int           @id @default(autoincrement())
  name           String        // First, Second, Third
  academicYearId Int
  academicYear   AcademicYear  @relation(fields: [academicYearId], references: [id])
  assessments    Assessment[]
}

model Assessment {
  id         Int              @id @default(autoincrement())
  title      String
  type       AssessmentType
  weight     Float
  maxScore   Int
  startTime  DateTime
  endTime    DateTime

  subjectId  Int
  subject    Subject          @relation(fields: [subjectId], references: [id])

  classId    Int
  class      Class            @relation(fields: [classId], references: [id])

  termId     Int
  term       Term             @relation(fields: [termId], references: [id])

  assessmentsTaken AssessmentResult[]
}

model AssessmentResult {
  id           Int         @id @default(autoincrement())
  score        Int
  remarks      String?

  assessmentId Int
  assessment   Assessment  @relation(fields: [assessmentId], references: [id])

  studentId    String
  student      Student     @relation(fields: [studentId], references: [id])

  gradedById   String?
  gradedBy     Teacher?    @relation("GradedByTeacher", fields: [gradedById], references: [id])
}

model Attendance {
  id        Int      @id @default(autoincrement())
  date      DateTime
  present   Boolean
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  description String?
  startTime DateTime
  endTime   DateTime
  classId   Int?
  class     Class?   @relation(fields: [classId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  date        DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
}

enum UseSex {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum AssessmentType {
  FIRST_CA
  SECOND_CA
  EXAM
}
